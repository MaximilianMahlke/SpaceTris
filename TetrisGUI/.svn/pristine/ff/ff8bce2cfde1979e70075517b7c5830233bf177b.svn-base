using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using TetrisApp;
using TetrisApp.GUI;
using TetrisApp.Tools;
using TetrisApp.Elemente.Felder;
using System.Diagnostics;
using System.Threading;
using TetrisApp.Elemente.Steine;

namespace TetrisApp
{
    /// <summary>
    /// Interaktionslogik für MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// Timer für UI
        /// </summary>

        // private TestTimer timer;

        private BoardUI Board_UI;
        private Spiel Game;
        private Timer_GUI Timer;
        private SyncMaster Sync;


        public MainWindow()
        {
            InitializeComponent();

            this.KeyDown += new KeyEventHandler(Window_KeyDown);

            #region UI

            Game = new Spiel();
            Board_UI = new BoardUI(this);
            Board_UI.ErstelleGrid(this, Game);
            Board_UI.GenerateBoardFeldArray(this, Game);
            Sync = new SyncMaster(Game, Board_UI);
            this.Timer = new Timer_GUI(this.Dispatcher, this, Sync, Game);

            // Intro();
        }
            #endregion UI



        public void Intro()
        {

            Thread thread = new Thread(() =>
            {

                Random random = new Random();
                int Dauer_Millis = 6000;

                DateTime StartZeit = DateTime.Now;
                DateTime EndZeit = StartZeit.AddMilliseconds(Dauer_Millis);
                byte Dauer = (byte)random.Next(500, 1000);

                SpinWait sw = new SpinWait();


                int count = 0;
                double y = 1;
                double x = 0;

                while (DateTime.Now < EndZeit)
                {
                    if (DateTime.Now < StartZeit.AddMilliseconds(3300))
                    {
                        this.Game.Board.Array[random.Next((int)x), random.Next((int)y)].Color = new Elemente.Steine.Farbe(
                            (byte)random.Next(256),
                            (byte)random.Next(256),
                            (byte)random.Next(256),
                            (byte)random.Next(256));
                    }

                    else
                    {
                        this.Game.Board.Array[random.Next((int)x), random.Next((int)y)].Color = null;
                    }
                    count++;

                    if (y < 18.9)
                    {
                        y += 0.015;
                    }

                    if (x < 10.9)
                    {
                        x += 0.009;
                    }

                    Dauer = (byte)(Dauer - 1.85);
                    if (Dauer < 13)
                    {
                        Dauer = 14;

                    }


                    for (int i = 0; i < Dauer; i++)
                    {
                        sw.SpinOnce();
                    }
                    //Thread.Sleep(Dauer);
                }
                count = 0;
            });
            thread.Start();
        }




        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Intro();
        }



        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            TetrisApp.Tools.Utils.SpawnBlock(this.Game);
            this.Game.GameStarted = true;
        }



        private void button_Click_2(object sender, RoutedEventArgs e)
        {

            if (this.Game.CurrentBlock.Move_down() == false)
            {
                TetrisApp.Tools.Utils.SpawnBlock(this.Game);
            }

        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            this.Game.Board.Clear();
        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            this.Game.CurrentBlock.Move_left();
        }

        private void Button_Click_5(object sender, RoutedEventArgs e)
        {
            this.Game.CurrentBlock.Move_right();
        }


        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            this.Game.CurrentBlock.Turn_right();
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            Process.GetCurrentProcess().Kill();
            Environment.Exit(0);
        }

        private void Button_Click_7(object sender, RoutedEventArgs e)
        {
            if (this.Game.GameStarted == true)
            {
                this.Game.GameStarted = false;
            }
            else
            {
                this.Game.GameStarted = true;
            }

        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {
            if (this.Game.LastBlockMove == null ||
                this.Game.LastBlockMove < DateTime.Now.Subtract(TimeSpan.FromMilliseconds(50)))
            {

                switch (e.Key)
                {
                    case Key.Left:
                        this.Game.CurrentBlock.Move_left();
                        this.Game.LastBlockMove = DateTime.Now;
                        break;

                    case (Key.Right):
                        this.Game.CurrentBlock.Move_right();
                        this.Game.LastBlockMove = DateTime.Now;
                        break;

                    case Key.Down:
                        this.Game.CurrentBlock.Move_down();
                        this.Game.LastBlockMove = DateTime.Now;
                        break;

                    case Key.Up:
                        this.Game.CurrentBlock.Turn_right();
                        this.Game.LastBlockMove = DateTime.Now;
                        break;

                    case Key.Enter:
                        TetrisApp.Tools.Utils.SpawnBlock(this.Game);
                        this.Game.GameStarted = true;
                        break;
                }
            }
        }
    }
}
