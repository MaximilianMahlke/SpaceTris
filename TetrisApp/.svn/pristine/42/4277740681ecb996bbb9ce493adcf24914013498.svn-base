using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TetrisApp.Tools;
using TetrisApp.Elements.Fields;
using TetrisApp.Elements.Steine;
using TetrisApp;
using TetrisApp.Tools.Interaction;
using System.Threading;



namespace TetrisApp
{
    public enum enum_Direction          // Richtungen für Kollisionsabfrage Check_Collision(Directon)
    {
        LEFT = 0, RIGHT = 1, DOWN = 2, NO_DIRECTION = 3
    }


    public class Game
    {

        #region VARS
        public Block CurrentBlock;
        public Block NextBlock;
        public Config Config;
        public Board Board;
        public Board BoardPreview;
        public Object Window;
        private Timer_Core Timer_Core;


        public List<RecurringEvent> RecurringEvents = new List<RecurringEvent>();
        public List<BlockForm> List_BlockForms = new List<BlockForm>();                     // Erstellt eine Liste aus <BlockForm> mit dem Namen BlockFormen
        public GuiInteraction GuiInteraction;

        public bool GameRunning = false;
        public bool GameIsOver = false;

        public DateTime StartTime;
        public DateTime? LastBlockMoveByUser = null;
        public DateTime? LastBlockSpawn = null;

        public Thread KillLineThread = null;

       
        #endregion VARS


        #region CONS
        public Game()
        {
            Config = new Config();
            List_BlockForms = Utils.GeneriereBlockformen(this.List_BlockForms);
            Board = new Board(this, this.Config.Width_GameBoard, this.Config.Height_GameBoard);
            BoardPreview = new Elements.Fields.Board(this, this.Config.Width_Preview, this.Config.Height_Preview);
            Timer_Core = new Timer_Core();
            Timer_Core.StartSystemTimer(1);

            // Die Kontrollmethode TimerTick() wird dem Tick Event des Timers zugeordnet damit diese bei jedem Tick ausgeführt wird und abfragt 
            Timer_Core.Tick += new Tools.Timer_Core.TickDelegate(this.TimerTick);

            RecurringEvent BlockDown = new RecurringEvent(this.Config.BlockDownIntervalMS, this);
            RecurringEvents.Add(BlockDown);
            BlockDown.EventAction = new RecurringEvent.EventActionDelegate(this.Execute_BlockDown);
            BlockDown.Event_StartAndReset();
        }

        #endregion CONS



        #region METHS



        // Prüft welche Zeilen voll sond und übergibt Index an KillAllFullLines-async() Methode
        public int? WichLineIsFull()
        {
            for (int y = this.Config.Height_GameBoard - 1; y > 0; y--)
            {
                bool LineIsFull = true;

                for (int x = 0; x < this.Config.Width_GameBoard; x++)
                {
                    if (this.Board.Array_Board[x, y].block == null)
                    {
                        LineIsFull = false;
                        break;
                    }

                }
                if (LineIsFull == true)
                {
                    return y;
                }
            }
            return null;
        }



        //  lösche jede volle Y-Zeile 
        public Thread KillAllFullLines_async()
        {
            if (KillLineThread != null &&
                KillLineThread.IsAlive == true)
            {
                return null;
            }
            this.GuiInteraction.AnimationSpeed(3);
            KillLineThread = new Thread(() =>
            {
                while (true)
                {
                    int? index = this.WichLineIsFull();

                    if (index == null) // keine volle Zeile mehr gefunden
                    {
                        break;  // also while schleife verlassen
                    }

                    int IndexOfLineToKill = (int)index;

                    for (int x = 0; x < this.Config.Width_GameBoard; x++)
                    {
                        this.Board.Array_Board[x, IndexOfLineToKill].Color = new Color(255, 255, 255);
                        System.Threading.Thread.Sleep(25);
                        this.Board.Array_Board[x, IndexOfLineToKill].Clear();
                        System.Threading.Thread.Sleep(25);
                    }

                    MoveBoardFields_DOWN(IndexOfLineToKill);

                    this.NextLevel();
                    this.Config.Score += this.Config.Config_ScoreForLineKill;
                    this.Config.KilledLines += 1;
                    
                    // score refreshen:
                    this.GuiInteraction.Refresh_StatisticData();
                   
                } // while end

            });
            KillLineThread.Start();
            this.GuiInteraction.AnimationSpeed(1);
            return KillLineThread;
        }



        // Wenn Zeile gelöscht, bewege Alles darüber nach unten
        public void MoveBoardFields_DOWN(int KilledLine_y)
        {
            for (int new_Y = KilledLine_y - 1; new_Y > 0; new_Y--)
            {
                for (int x = 0; x < this.Config.Width_GameBoard; x++)
                {
                    if (this.Board.Array_Board[x, new_Y].block != CurrentBlock &&
                        this.Board.Array_Board[x, new_Y].Color != null &&
                        this.Board.Array_Board[x, new_Y - 1].block != this.CurrentBlock &&
                        this.Board.Array_Board[x, new_Y + 1].Color == null
                        )
                    {
                        MoveOneBoardField_Down(this.Board.Array_Board[x, new_Y]);
                    }
                }
            }
        }

        public void MoveOneBoardField_Down(BoardField boardfield)
        {
            // Übernimmt oberes BoardField um 1 nach unten
            this.Board.Array_Board[boardfield.x, boardfield.y + 1].block = boardfield.block;
            this.Board.Array_Board[boardfield.x, boardfield.y + 1].Color = boardfield.Color;

            //Lösche oberes Feld
            this.Board.Array_Board[boardfield.x, boardfield.y].Clear();
        }

        public void Execute_BlockDown()
        {
            this.CurrentBlock.Move_down();
        }

        // wirds jede ms aufgerufen und prüft ob eines der RecurringEvents abgelaufen ist und ausgeführt werden soll
        public void TimerTick()
        {
            if (GameRunning == true)
            {
                foreach (RecurringEvent Event in RecurringEvents)
                {
                    Event.Event_IntervalCheck();
                }
            }
        }
        /// <summary>
        /// Startet das Spiel
        /// </summary>
        public void StartGame()
        {
            Utils.SpawnBlock(this);
            this.StartTime = DateTime.Now;
            this.GameRunning = true;
            this.Config.Screen = "HAVE A NICE DAY! :D";
            
            // Direkt bei Spielstart den Score anzeigen
            this.GuiInteraction.Refresh_StatisticData();
        }

        // Berechnet die bereits gelaufene Spielzeit
        public TimeSpan GetGameTime()
        {
            return (DateTime.Now).Subtract(this.StartTime);
        }

        public void GameOver()
        {
            this.Config.Screen = "GAME OVER!";
            this.GameRunning = false;
            this.GameIsOver = true;
            this.GuiInteraction.Refresh_StatisticData();
            this.GuiInteraction.AnimationSpeed(3);
        }
        // erhöht das Handicap und auch Punktevergabe bei jedem neuen Level
        public void NextLevel()
        {
            this.Config.CounterForNextLevel++;

            if (this.Config.CounterForNextLevel == this.Config.StepForNextLevel)
            {
                if (this.Config.Level <= 10)
                {
                    this.Config.Level++;
                    this.Config.Config_ScoreForLineKill += this.Config.Config_ScoreForLineKill / 10;
                    this.Config.Config_ScoreForLanding += this.Config.Config_ScoreForLanding / 10;
                    this.Config.BlockDownReducer();
                    this.Config.CounterForNextLevel = 0;
                    this.Config.StepForNextLevel += 5;
                    this.GuiInteraction.AnimationSpeed(2);
                }
            }
        }

        // Pausiert das Spiel
        public void Pause()
        {
            if (this.GameIsOver == false)
            {
                if (this.GameRunning == true)
                {
                    this.GameRunning = false;
                }
                else
                {
                    this.GameRunning = true;
                }
            }
        }
        #endregion METHS


    }
}
