using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TetrisApp.Tools;
using TetrisApp.Elements.Fields;
using TetrisApp.Elements.Steine;
using TetrisApp;
using TetrisApp.Tools.Interaction;





namespace TetrisApp
{
    public enum enum_Direction          // Richtungen für Kollisionsabfrage Check_Collision(Directon)
    {
        LEFT = 0, RIGHT = 1, DOWN = 2, NO_DIRECTION = 3
    }


    public class Game
    {

        #region VARS
        public Block CurrentBlock;
        public Block NextBlock;
        public Config Config;
        public Board Board;
        public Board BoardPreview;
        public Object Window;
        private Timer_Core Timer_Core;
        public List<RecurringEvent> RecurringEvents = new List<RecurringEvent>();
        public List<BlockForm> List_BlockFormen = new List<BlockForm>();                     // Erstellt eine Liste aus <BlockForm> mit dem Namen BlockFormen
        public GuiInteraction GuiInteraction;
        public Random r = new Random();


        public bool GameRunning = false;
        public bool GameIsOver = false;

        public DateTime StartTime;
        public DateTime? LastBlockMoveByUser = null;

        public int Score = 0;
        public int KilledLines = 0;
        public int Level = 0;
        public string Screen = "Welcome!";

        public int Config_ScoreForLineKill = 100;
        public int Config_ScoreForLanding = 10;
        public int CounterForNextLevel = 0;
        public int StepForNextLevel = 10;
        
        //   public static List<String> List_Namen = new List<String>();
        #endregion VARS


        #region CONS
        public Game()
        {
            Config = new Config();

            List_BlockFormen = Utils.GeneriereBlockformen(this.List_BlockFormen);

            Board = new Board(this, this.Config.Width_GameBoard, this.Config.Height_GameBoard);
            BoardPreview = new Elements.Fields.Board(this, this.Config.Width_Preview, this.Config.Height_Preview);

            
            Timer_Core = new Timer_Core();
            Timer_Core.StartSystemTimer(1);

            // Die Kontrollmethode TimerTick() wird wird dem Tick Event des Timers 
            // zugeordnet damit diese bei jedem Tick ausgeführt wird und abfragt 
            Timer_Core.Tick += new Tools.Timer_Core.TickDelegate(this.TimerTick);

            RecurringEvent BlockDown = new RecurringEvent(this.Config.BlockDownIntervalMS, this);
            RecurringEvents.Add(BlockDown);
            BlockDown.EventAction = new RecurringEvent.EventActionDelegate(this.Execute_BlockDown);
            BlockDown.Event_StartAndReset();
        }

        #endregion CONS



        #region METHS

        public int? GlowLines(int? index)
        {
            if (index != null)
            {
                for (int x = 0; x < this.Config.Width_GameBoard - 1; x++)
                {
                    this.Board.Array_Board[x, (int)index].Color = null; //new Color((byte)r.Next(255), (byte)r.Next(255), (byte)r.Next(255));
                                                                         System.Threading.Thread.Sleep(50);
                }
            }
            return index;
        }


        public int? WichLineIsFull()
        {
            for (int y = this.Config.Height_GameBoard - 1; y > 0; y--)
            {
                bool LineIsFull = true;
               
                for (int x = 0; x < this.Config.Width_GameBoard; x++)
                {
                    if (this.Board.Array_Board[x, y].block == null)
                    {
                        LineIsFull = false;
                        break;
                    }

                }
                if (LineIsFull == true)
                {
                    return y;
                }
            }
            return null;
        }



        //  lösche jede Y-Zeile aus der Liste
        public bool KillLine_y(int? index)
        {
            int IndexOfLineToKill;
            if (index != null)
            {
                IndexOfLineToKill = (int)index;
            }
            else
            {
                return false;
            }



            for (int x = 0; x < this.Config.Width_GameBoard; x++)
            {
                this.Board.Array_Board[x, IndexOfLineToKill].Clear();
            }
    
            MoveBoardFields_DOWN(IndexOfLineToKill);
            this.NextLevel();
            this.Score += this.Config_ScoreForLineKill;
            this.KilledLines += 1;
            return true;
        }

      

        // Wenn Zeile gelöscht, bewege Alles darüber nach unten
        public void MoveBoardFields_DOWN(int KilledLine_y)
        {
            for (int new_Y = KilledLine_y - 1; new_Y > 0; new_Y--)
            {
                for (int x = 0; x < this.Config.Width_GameBoard; x++)
                {
                    //if (this.Board.Array[x, new_Y].block != CurrentBlock)
                    {
                        MoveOneBoardField_Down(this.Board.Array_Board[x, new_Y]);
                    }
                }
            }
        }

        public void MoveOneBoardField_Down(BoardField boardfield)
        {
            // Übernimmt oberes BoardField um 1 nach unten
            this.Board.Array_Board[boardfield.x, boardfield.y + 1].block = boardfield.block;
            this.Board.Array_Board[boardfield.x, boardfield.y + 1].Color = boardfield.Color;

            //Lösche oberes Feld
            this.Board.Array_Board[boardfield.x, boardfield.y].Clear();
        }

        public void Execute_BlockDown()
        {
            this.CurrentBlock.Move_down();
        }

        // wirds jede ms aufgerufen und prüft ob eines der RecurringEvents abgelaufen ist und ausgeführt werden soll
        public void TimerTick()
        {
            if (GameRunning == true)
            {
                foreach (RecurringEvent Event in RecurringEvents)
                {
                    Event.Event_IntervalCheck();
                }
            }
        }

        public void StartGame()
        {  
            Utils.SpawnBlock(this);
            this.StartTime = DateTime.Now;
            this.GameRunning = true;
         

        }

        public TimeSpan GetGameTime()
        {
            return (DateTime.Now).Subtract(this.StartTime);
        }

        public void GameOver()
        {
            this.GameRunning = false;
            this.GameIsOver = true;
            this.Screen = "GAME OVER!";
         
        }

        public void NextLevel()
        {
            this.CounterForNextLevel++;


            if (CounterForNextLevel == StepForNextLevel)
            {
                this.Level++;
                this.Config_ScoreForLineKill += Config_ScoreForLineKill / 10;
                this.Config_ScoreForLanding += Config_ScoreForLanding / 10;
                this.Config.BlockDownReducer();
                this.CounterForNextLevel = 0;
                this.StepForNextLevel += 5;
           
            }
        }

        #endregion METHS
    }
}
